// Generated by dts-bundle-generator v6.13.0

export declare class Point3D {
	x: number;
	y: number;
	z: number;
	constructor(x: number, y: number, z: number);
	set(x: number, y: number, z: number): Point3D;
	getDifference(other: Point3D): Point3D;
	copy(): Point3D;
	getLength(): number;
}
declare class Point2D {
	x: number;
	y: number;
	constructor(x: number, y: number);
	set(x: number, y: number): Point2D;
	copy(): Point2D;
	getLength(): number;
}
export declare class Source {
	readonly channel: number;
	private renderer;
	private input;
	private outputIndex;
	private isConnected;
	private position;
	private gain;
	private reverbSend;
	private occlusion;
	private attenuationCurveIndex;
	name: string;
	constructor(renderer: Renderer, channel: number);
	setInput(input: AudioNode | MediaStreamTrack | any, outputIndex?: number, connect?: boolean): void;
	getInputNode(): AudioNode;
	connect(): void;
	disconnect(): void;
	setPosition(x: number, y: number, z: number): void;
	setAttenuationCurveIndex(index: number): void;
	getAttenuationCurveIndex(): number;
	setGainLinear(gain: number): void;
	setGainDecibels(dB: number): void;
	setReverbSendLinear(gain: number): void;
	setReverbSendDecibels(dB: number): void;
	setOcclusion(occlusion: number): void;
	getOcclusion(): number;
	getGainLinear(): number;
	getGainDecibels(): number;
	getReverbSendLinear(): number;
	getReverbSendDecibels(): number;
	getPosition(): Point3D;
	delete(): void;
}
declare class Quaternion {
	readonly w: number;
	readonly x: number;
	readonly y: number;
	readonly z: number;
	constructor(w?: number, x?: number, y?: number, z?: number);
	static fromYawPitchRoll(yawInRadians: number, pitchInRadians: number, rollInRadians: number): Quaternion;
}
declare class Listener {
	private readonly renderer;
	readonly w: AudioParam;
	readonly x: AudioParam;
	readonly y: AudioParam;
	readonly z: AudioParam;
	private position;
	constructor(renderer: Renderer, w: AudioParam, x: AudioParam, y: AudioParam, z: AudioParam);
	setPosition(x: number, y: number, z: number): void;
	getPosition(): Point3D;
	setRotation(yawInRadians: number, pitchInRadians: number, rollInRadians: number): void;
	setRotationQuaternion(w: number, x: number, y: number, z: number): void;
	getRotationQuaternion(): Quaternion;
}
declare class ExternalizerParameters {
	readonly amount: AudioParam;
	readonly character: AudioParam;
	constructor(amount: AudioParam, character: AudioParam);
}
declare class ReverbParameters {
	readonly amount: AudioParam;
	constructor(amount: AudioParam);
}
export declare class AttenuationCurve {
	readonly node: Renderer;
	readonly index: number;
	private a;
	private b;
	private c;
	private maxDistance;
	name: string;
	constructor(node: Renderer, index: number, ax?: number, ay?: number, bx?: number, by?: number, cx?: number, cy?: number, maxDistance?: number);
	getParameters(): {
		a: Point2D;
		b: Point2D;
		c: Point2D;
		maxDistance: number;
	};
	setParameters(ax: number, ay: number, bx: number, by: number, cx: number, cy: number, maxDistance: number): void;
}
export declare class Renderer extends AudioWorkletNode {
	externalizer: ExternalizerParameters;
	reverb: ReverbParameters;
	listener: Listener;
	attenuationCurves: Array<AttenuationCurve>;
	sources: Array<Source>;
	constructor(context: BaseAudioContext, numberOfInputs: number, numberOfAttenuationCurves: number);
	createSource(): Source;
	removeSource(source: Source): void;
	getListener(): Listener;
	getListenerRelativeSourcePositions(): Array<Point3D>;
	getSourceDistances(): Array<number>;
	destroy(): void;
}
export declare class Manager {
	version: {
		major: number;
		minor: number;
		patch: number;
	};
	private module;
	context: BaseAudioContext;
	constructor();
	prepareContext(context: BaseAudioContext): Promise<void>;
	createRenderer(numberOfSources: number, numberOfAttenuationCurves: number): Renderer;
	static isSimdSupported(): Promise<boolean>;
}
declare enum SourceType {
	AudioFile = "AudioFile",
	Empty = "EmptyInput"
}
export declare type SourceDescription = {
	name: string;
	type: SourceType | string;
	file?: string;
	shouldStartPlaying?: boolean;
	looping?: boolean;
	position: {
		x: number;
		y: number;
		z: number;
	};
	reverbSendDecibels?: number;
	gainDecibels?: number;
	occlusion?: number;
	attenuationCurveIndex?: number;
};
export declare type AttenuationCurveDescription = {
	name: string;
	ax: number;
	ay: number;
	bx: number;
	by: number;
	cx: number;
	cy: number;
	maxDistance: number;
};
export declare type ListenerConfig = {
	position?: {
		x: number;
		y: number;
		z: number;
	};
	orientation?: {
		yaw: number;
		pitch: number;
		roll: number;
	};
};
export declare type AudioSceneConfig = {
	sources: SourceDescription[];
	attenuationCurves: AttenuationCurveDescription[];
	listener?: ListenerConfig;
};
export declare class AudioScene {
	context: BaseAudioContext;
	renderer: Renderer;
	sources: Map<string, Source>;
	setupComplete: Promise<void>;
	constructor(config: AudioSceneConfig | string, options?: AudioContextOptions, context?: BaseAudioContext);
	startContext(): void;
	private setupScene;
	private static fetchAudioFile;
}

export {};
